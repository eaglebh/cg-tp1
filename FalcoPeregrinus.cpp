#include "FalcoPeregrinus.h"
#include "ObjLoader.h"


FalcoPeregrinus::FalcoPeregrinus(long id) :
    // velocidade maxima do falcao peregrino http://en.wikipedia.org/wiki/Peregrine_Falcon
    Bird(id, 57)
{
    float vertices[] = {
        0.242670f, -0.240995f, -0.000630f,
        -0.019416f, -1.202091f, -0.018285f,
        0.237659f, -0.240393f, -0.033037f,
        0.222821f, -0.239800f, -0.064200f,
        0.198723f, -0.239240f, -0.092919f,
        0.166294f, -0.238733f, -0.118091f,
        0.126778f, -0.238299f, -0.138749f,
        0.081695f, -0.237956f, -0.154100f,
        0.032777f, -0.237715f, -0.163552f,
        -0.018096f, -0.237587f, -0.166743f,
        -0.068970f, -0.237575f, -0.163551f,
        -0.117888f, -0.237682f, -0.154097f,
        -0.162972f, -0.237902f, -0.138746f,
        -0.202488f, -0.238228f, -0.118086f,
        -0.234918f, -0.238645f, -0.092913f,
        -0.259016f, -0.239140f, -0.064193f,
        -0.273855f, -0.239692f, -0.033031f,
        -0.278866f, -0.240280f, -0.000623f,
        -0.273856f, -0.240882f, 0.031785f,
        -0.259017f, -0.241475f, 0.062947f,
        -0.234920f, -0.242036f, 0.091666f,
        -0.202490f, -0.242542f, 0.116839f,
        -0.162975f, -0.242976f, 0.137497f,
        -0.117892f, -0.243320f, 0.152847f,
        -0.068973f, -0.243560f, 0.162299f,
        -0.018100f, -0.243689f, 0.165491f,
        0.032773f, -0.243700f, 0.162298f,
        0.081692f, -0.243593f, 0.152844f,
        0.126775f, -0.243373f, 0.137493f,
        0.166291f, -0.243048f, 0.116834f,
        0.198721f, -0.242630f, 0.091660f,
        0.222819f, -0.242135f, 0.062941f,
        0.237659f, -0.241583f, 0.031778f,
        0.460908f, -0.280809f, -0.004694f,
        0.463648f, 1.719188f, -0.002795f,
        0.451896f, -0.280862f, 0.064049f,
        0.454636f, 1.719135f, 0.065949f,
        0.425205f, -0.280888f, 0.130150f,
        0.427945f, 1.719109f, 0.132050f,
        0.381861f, -0.280887f, 0.191070f,
        0.384601f, 1.719110f, 0.192970f,
        0.323529f, -0.280858f, 0.244467f,
        0.326269f, 1.719140f, 0.246367f,
        0.252451f, -0.280802f, 0.288289f,
        0.255191f, 1.719195f, 0.290189f,
        0.171359f, -0.280722f, 0.320852f,
        0.174099f, 1.719276f, 0.322752f,
        0.083369f, -0.280620f, 0.340905f,
        0.086109f, 1.719377f, 0.342805f,
        -0.008138f, -0.280501f, 0.347677f,
        -0.005398f, 1.719496f, 0.349577f,
        -0.099646f, -0.280369f, 0.340907f,
        -0.096906f, 1.719628f, 0.342807f,
        -0.187636f, -0.280230f, 0.320857f,
        -0.184896f, 1.719767f, 0.322757f,
        -0.268730f, -0.280088f, 0.288296f,
        -0.265989f, 1.719909f, 0.290196f,
        -0.339808f, -0.279949f, 0.244476f,
        -0.337068f, 1.720048f, 0.246376f,
        -0.398141f, -0.279818f, 0.191080f,
        -0.395401f, 1.720179f, 0.192980f,
        -0.441487f, -0.279701f, 0.130162f,
        -0.438747f, 1.720296f, 0.132061f,
        -0.468179f, -0.279602f, 0.064061f,
        -0.465439f, 1.720396f, 0.065961f,
        -0.477193f, -0.279524f, -0.004682f,
        -0.474453f, 1.720473f, -0.002782f,
        -0.468181f, -0.279471f, -0.073425f,
        -0.465441f, 1.720526f, -0.071526f,
        -0.441490f, -0.279445f, -0.139527f,
        -0.438750f, 1.720552f, -0.137627f,
        -0.398146f, -0.279446f, -0.200447f,
        -0.395406f, 1.720551f, -0.198547f,
        -0.339814f, -0.279475f, -0.253844f,
        -0.337074f, 1.720522f, -0.251944f,
        -0.268736f, -0.279531f, -0.297666f,
        -0.265996f, 1.720466f, -0.295766f,
        -0.187644f, -0.279611f, -0.330229f,
        -0.184904f, 1.720386f, -0.328329f,
        -0.099653f, -0.279713f, -0.350281f,
        -0.096913f, 1.720284f, -0.348382f,
        -0.008146f, -0.279832f, -0.357053f,
        -0.005406f, 1.720165f, -0.355153f,
        0.083361f, -0.279964f, -0.350284f,
        0.086101f, 1.720034f, -0.348384f,
        0.171352f, -0.280103f, -0.330233f,
        0.174092f, 1.719894f, -0.328333f,
        0.252445f, -0.280245f, -0.297672f,
        0.255185f, 1.719752f, -0.295772f,
        0.323524f, -0.280384f, -0.253852f,
        0.326264f, 1.719613f, -0.251952f,
        0.381857f, -0.280515f, -0.200456f,
        0.384597f, 1.719482f, -0.198557f,
        0.425202f, -0.280632f, -0.139538f,
        0.427942f, 1.719365f, -0.137638f,
        0.451894f, -0.280731f, -0.073437f,
        0.454635f, 1.719266f, -0.071537f
    };



    float colors[] = {
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.5f,
        1.0f, 0.5f, 0.5f, 1.0f, 0.5f, 0.0f
    };

    short unsigned int indices[] = {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
        49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
        72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
        95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
        115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
        134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
        153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
        172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
        191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
        210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
        229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
        248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
        267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
        286, 287, 288, 289, 290, 291
    };

    float cube_vertices[] = {
        // front
        -1.0, -1.0,  1.0,
         1.0, -1.0,  1.0,
         1.0,  1.0,  1.0,
        -1.0,  1.0,  1.0,
        // back
        -1.0, -1.0, -1.0,
         1.0, -1.0, -1.0,
         1.0,  1.0, -1.0,
        -1.0,  1.0, -1.0,
      };

    float cube_colors[] = {
        // front colors
        1.0, 0.0, 0.0,
        0.0, 1.0, 0.0,
        0.0, 0.0, 1.0,
        1.0, 1.0, 1.0,
        // back colors
        1.0, 0.0, 0.0,
        0.0, 1.0, 0.0,
        0.0, 0.0, 1.0,
        1.0, 1.0, 1.0,
      };

    unsigned short cube_elements[] = {
        // front
        0, 1, 2,
        2, 3, 0,
        // top
        1, 5, 6,
        6, 2, 1,
        // back
        7, 6, 5,
        5, 4, 7,
        // bottom
        4, 0, 3,
        3, 7, 4,
        // left
        4, 5, 1,
        1, 0, 4,
        // right
        3, 2, 6,
        6, 7, 3,
      };

    std::vector<glm::vec4> v_vertices;
    std::vector<glm::vec3> normals; // Won't be used at the moment.
    std::vector<unsigned short> elements;
    ObjLoader::loadObj("bird.obj", v_vertices, normals, elements);

//    graphical.setVertices(&v_vertices[0], v_vertices.size());
//    graphical.setColors(colors, sizeof(colors)/sizeof(colors[0]));
//    graphical.setIndices(&elements[0], elements.size());

}
